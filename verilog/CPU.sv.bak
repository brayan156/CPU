module CPU(input logic clk, reset,
				output logic [31:0] PC,
				input logic [31:0] Instr,
				output logic MemWrite,
				output logic [31:0] ALUResult, WriteData,
				input logic [31:0] ReadData);
				
				
	logic [3:0] ALUFlags;
	logic RegWrite,ALUSrc, MemtoReg, PCSrc;
	logic [1:0] RegSrc, ImmSrc, selec_alu;


	controller c(clk, reset, Instr[31:12], {flagN,flagZ,flagC,flagV},RegSrc, RegWrite, ImmSrc,ALUSrc, selec_alu,MemWrite, MemtoReg, PCSrc);

	logic ci=0;
	logic flagN,flagZ,flagC,flagV
	
	logic [31:0] PCNext, PCPlus4, PCPlus8;
	logic [31:0] ExtImm, A, B, Result;
	logic [3:0] RA1, RA2;
	// next PC logic
	Mux2_1 #(32) pcmux(PCPlus4, Result, PCSrc, PCNext);
	flopr #(32) pcreg(clk, reset, PCNext, PC);
	adder #(32) pcadd1(PC, 32'b100, PCPlus4);
	adder #(32) pcadd2(PCPlus4, 32'b100, PCPlus8);
	// register file logic
	Mux2_1 #(4) ra1mux(Instr[19:16], 4'b1111, RegSrc[0], RA1);
	Mux2_1 #(4) ra2mux(Instr[3:0], Instr[15:12], RegSrc[1], RA2);
	regfile rf(clk, RegWrite, RA1, RA2,
	Instr[15:12], Result, PCPlus8,
	A, WriteData);
	
	
	Mux2_1 #(32) resmux(ALUResult, ReadData, MemtoReg, Result);
	Extender ext(Instr[23:0], ImmSrc, ExtImm);
	// ALU logic

	
	Mux2_1 #(32) Bmux(WriteData, ExtImm, ALUSrc, B);
	ALU #(32) uut (A, B, ci,selec_alu, ALUResult,flagN,flagZ,flagC,flagV);


endmodule





